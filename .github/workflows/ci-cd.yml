name: Spring Boot CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Get JAR file name
        id: jar
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-plain.jar" | head -1)
          echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "jar_name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT

      - name: Deploy JAR to server
        uses: appleboy/scp-action@v1
        with:
          host: dkswoalstest.duckdns.org
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 2222
          source: ${{ steps.jar.outputs.jar_file }}
          target: /home/${{ secrets.SERVER_USERNAME }}/app/
          strip_components: 2

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Deploy to server
        run: |
          # 기존 프로세스 종료
          ssh -p 2222 -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USERNAME }}@dkswoalstest.duckdns.org \
            "pkill -f 'java -jar' || echo 'No process to kill'"
          
          sleep 3
          
          # 새 애플리케이션 시작
          ssh -p 2222 -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USERNAME }}@dkswoalstest.duckdns.org \
            "cd /home/${{ secrets.SERVER_USERNAME }}/app && nohup java -jar ${{ steps.jar.outputs.jar_name }} > app.log 2>&1 &"
          
          sleep 5
          
          # 실행 확인
          ssh -p 2222 -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USERNAME }}@dkswoalstest.duckdns.org \
            "pgrep -f 'java -jar' && echo '✅ Application started successfully' || echo '❌ Failed to start'"
